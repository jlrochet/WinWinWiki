x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
colnames(cnames, my_data)
colnames(my_data) <- cnames
my_data
mtcars
colMeans(mtcars)
colMeans(mtcars$mpg)
mean(mtcars$mpg)
mtcars_means <- colMeans(mtcars)
mtcars_means
mtcars_means$cyl
mtcars_means[2]
lapply(mtcars, function(whatever), whatever[mean(mtcars)])
lapply(mtcars, function(whatever) whatever[mean(mtcars)])
lapply(mtcars, function(whatever) whatever[,1])
lapply(mtcars, function(whatever) whatever[1])
lapply(mtcars, function(whatever) whatever[1,3])
mtcars2 <- unclass(mtcars)
mtcars2
rm(list=ls())
?gl
factor_eg <- gl(10, 5)
factor_eg
factor_eg <- gl(10, c("Men", "Women"))
factor_eg <- gl(2, 10, labels = c("Men", "Women"))
factor_eg
unclass(factor_eg)
factor_eg
airquality
lapply(split(airquality, months))
lapply(split(airquality, airquality$months))
lapply(split(airquality, function(x) colmeans(airquality$months))
lapply(split(airquality, function(x) colMeans(airquality$months))
s <- split(airquality, airquality$Month)
lapply(split(airquality, function(x) colMeans(airquality$Month))
s
head(s)
lapply(s, function(x) colMeans(x))
lapply(s, function(x) colMeans(x[, c("Wind", "Temp", "Day")]))
weathercolmean <- lapply(s, function(x) colMeans(x[, c("Wind", "Temp", "Day")]))
weathercolmean
class(weathercolmean)
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind"]))
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
y <- sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
y
class(y)
ytable <- data.frame(y)
ytable
class(ytable)
y <- sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]), na.rm = TRUE)
y <- sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
y
mean(x)
traceback()
lm(y - x)
traceback
traceback()
lm(y - x)
traceback()
lm (y ~ x)
traceback()
debug(lm)
lm(y ~ x)
options(error = recover)
read.csv("nosuchfile")
2
3
stop
q
swirl()
rm(list=ls())
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
rm(list=ls())
options()
options(error = )
options(error = FALSE)
?options
getOption("error")
options(error = NULL)
options(weasdf)
library(datasets)
data("iris")
head(iris)
summary(iris)
iris
dim(iris)
?iris
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
apply(iris[,1:4], 1, mean)
apply(iris, 2, mean)
apply(iris[,1:4], 2, mean)
?apply
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?abs
tapply(mtcars$hp, mtcars$hp[4], mean)
tapply(mtcars$hp, mtcars$cyl[4], mean)
tapply(mtcars$hp, mtcars$cyl = 4, mean)
tapply(mtcars$hp, mtcars["cyl"] = 4, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
hp_cyl <- tapply(mtcars$hp, mtcars$cyl, mean)
hp_cyl
abs(hp_cyl[2] - hp_cyl[3])
209.214 - 122.2857
debug(ls)
ls()
?with
apply(iris, 2, mean)
?<<-
a <- b <- c <- 6
a <<- 6
a <<- 10
makeMean <- function(x = numeric()) {
originalNum <<- x
meanX <- mean(x)
return(meanX)
}
makeMean(1:300)
originalNum
rm(list=ls())
# RDPeng's example
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(1:300)
cachemean(1:300)
rm(list=ls())
# RDPeng's example
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector()
cachemean()
cachemean(1:300)
x <- 5
y <- function() x
y()
y <- function() mean(x)
y()
x <- 1:300
y()
z <- makeVector(x)
zee <- cachemean(z)
z
zee
y <- 1:500
cachemean(y)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list (set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list (set = set, get = get, setsolve = setsolve, getsolve = getsolve)
}
x <- matrix(1:4, 2, 2)
x
solve(x)
xinv <- solve(x)
x %*% xinv
identity2x2 <- x %*% xinv
identity2x2
makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message ("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cachemtx <- makeCacheMatrix(x)
cacheSolve(cachemtx)
x %*% cachemtx
x %*% cacheSolve(cachemtx)
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
mtx <- NULL
#        set <- function(y) {
#                x <<- y
#                mtx <<- NULL
#        }
get <- function() x
setsolve <- function(solve) mtx <<- solve
getsolve <- function() mtx
list (get = get, setsolve = setsolve, getsolve = getsolve)
}
x <- matrix(1:4, 2, 2)
xccache <- makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
mtx <- x$getsolve()
if(!is.null(mtx)) {
message ("retrieving cached data")
return(mtx)
}
data <- x$get()
mtx <- solve(data, ...)
x$setsolve(mtx)
mtx
}
cacheSolve(xccache)
solution <- cacheSolve(xccache)
solution
## Created by jlrochet on 6-8-2016
## This code closely follows Prof. Peng's example on Coursera
## These two functions work together to solve for the inverse of a matrix
## makeCacheMatrix stores the matrix information in a list for caching
## I eliminated the "set" function from the example code because it doesn't seem
## to do anything in either function...
makeCacheMatrix <- function(x = matrix()) {
mtx <- NULL
get <- function() x
setsolve <- function(solve) mtx <<- solve
getsolve <- function() mtx
list (get = get, setsolve = setsolve, getsolve = getsolve)
}
## cacheSolve returns the cached inverse matrix or calculates
## the inverse matrix absent a cached version
cacheSolve <- function(x, ...) {
mtx <- x$getsolve()
if(!is.null(mtx)) {
message ("retrieving cached data...")
return(mtx)
}
data <- x$get()
mtx <- solve(data, ...)
x$setsolve(mtx)
mtx
}
x <- matrix(1:9, 3, 3)
xinv <- solve(x)
x <- matrix(9:1, 3, 3)
xinv <- solve(x)
x <- matrix(1:16, 4, 4)
xinv <- solve(x)
x <- matrix(c(3,5,8,3,2,7,3,7,3), 3, 3)
xinv <- solve(x)
identitymtx<- x %*% xinv
identitymtx
round(identitymtx)
makeCacheMatrix(x)
z <- makeCacheMatrix(x)
z
cacheSolve(z)
xinvfunc <- cacheSolve(z)
x %*% xinvfunc
identity2 <- x %*% xinvfunc
round(identity2)
rm(list=ls())
install.packages("twitteR")
library(httr)
library(twitteR)
getTwitterOAuth(MaX6LNtLyEFSa1Qr8uCy4Sadj, FNb7hFOiXkWzMMHjkOx7GCNZqotoBcn7STkIRpH7h7bNfU3gey)
?setup_twitter_oauth
setup_twitter_oauth(MaX6LNtLyEFSa1Qr8uCy4Sadj, FNb7hFOiXkWzMMHjkOx7GCNZqotoBcn7STkIRpH7h7bNfU3gey)
setup_twitter_oauth("MaX6LNtLyEFSa1Qr8uCy4Sadj", "FNb7hFOiXkWzMMHjkOx7GCNZqotoBcn7STkIRpH7h7bNfU3gey")
setup_twitter_oauth("MaX6LNtLyEFSa1Qr8uCy4Sadj", "FNb7hFOiXkWzMMHjkOx7GCNZqotoBcn7STkIRpH7h7bNfU3gey", "47132476-sIlUkSsG3JK5OybjkSbytKjkiZj7MKrxSzQqBH7vv", "58z74lBMXNp8WhJ0n22WkTeQkHCL6npbFbUuJuobp8MJl")
searchTwitter('apartment hunting', geocode='40.7361,-73.9901,5mi',  n=5000, retryOnRateLimit=1)
searchTwitter('Suffolk County Sheriff Massachusetts', n=1)
searchTwitter('Suffolk County Sheriff Massachusetts', n=1, retryOnRateLimit = 1)
searchTwitter('Suffolk County Sheriff Massachusetts', n=1, retryOnRateLimit = 1)
searchTwitter('apartment hunting', geocode='40.7361,-73.9901,5mi',  n=30, retryOnRateLimit=1)
searchTwitter('Suffolk County Sheriff',  n=30, retryOnRateLimit=1)
sheriff_tweets <- searchTwitter('Suffolk County Sheriff',  n=30, retryOnRateLimit=1)
tweets <- data.frame(sheriff_tweets)
tweets <- data.frame(sheriff_tweets$screenName)
sheriff_tweets$screenName
sheriff_tweets
getCreated(sheriff_tweets)
sheriff_tweets[1]
sheriff_tweets[1][1]
sheriff_tweets[1][1][1]
rm(list=ls())
# Load libraries
library(magrittr)
library(dplyr)
library(readr)
library(leaflet)
# Set working directory
setwd("/Users/JLR/Documents/GitHub Repos/WinWin")
# Read file
wiki <- read_csv("mawiki.csv")
# Clean up file (remove duplicate and unnecessary columns, etc.)
wiki <- wiki[ , !duplicated(colnames(wiki))]
wiki %>%
select(Organization, Website, Sector, Dimension = `Primary Dimension`,
Component = `Primary Componenet`, Indicator = `Primary Indicator`,
Resources = `Budget/Revenue`, Latitude, Longitude) -> wikitable
# Remove rows without Resources
wikitable <- wikitable[!(is.na(wikitable$Resources) | wikitable$Resources==0),]
# Convert Sector to factor
wikitable$Sector <- as.factor(wikitable$Sector)
# Define sector colors
pal <- colorFactor(c("navy", "red", "green"), domain = c("Public", "Social", "Private"))
# Create leaflet widget
m <- leaflet(data = wikitable) %>%
addTiles() %>%
addCircleMarkers(
popup = ~Organization,
color = ~pal(Sector)
)
# Output leaflet widget
m
m <- leaflet(data = wikitable) %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
m
m <- leaflet(data = wikitable) %>%
addTiles() %>%
addCircleMarkers(clusterOptions = markerClusterOptions())
m
m <- leaflet(data = wikitable) %>%
addTiles() %>%
addCircleMarkers(
popup = ~Organization,
color = ~pal(Sector)
clusterOptions = markerClusterOptions()
)
m <- leaflet(data = wikitable) %>%
addTiles() %>%
addCircleMarkers(
popup = ~Organization,
color = ~pal(Sector)
clusterOptions = markerClusterOptions()
)
# Output leaflet widget
m
m <- leaflet(data = wikitable) %>%
addTiles() %>%
addCircleMarkers(
clusterOptions = markerClusterOptions()
popup = ~Organization,
color = ~pal(Sector)
)
m <- leaflet(data = wikitable) %>%
addTiles() %>%
addCircleMarkers(
clusterOptions = markerClusterOptions()
popup = ~Organization,
color = ~pal(Sector)
)
# Output leaflet widget
m
?markerClusterOptions
m <- leaflet(data = wikitable) %>%
addTiles() %>%
addCircleMarkers(
clusterOptions = markerClusterOptions(
popup = ~Organization,
color = ~pal(Sector)
)
)
# Output leaflet widget
m
m <- leaflet(data = wikitable) %>%
addTiles() %>%
addCircleMarkers(clusterOptions = markerClusterOptions())
m
m <- leaflet(data = wikitable) %>%
addTiles() %>%
addCircleMarkers(popup = ~Organization, clusterOptions = markerClusterOptions())
m
m <- leaflet(data = wikitable) %>%
addTiles() %>%
addCircleMarkers(popup = ~Organization, color = ~pal(Sector),
clusterOptions = markerClusterOptions())
m
